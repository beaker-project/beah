# Beah - Test harness. Part of Beaker project.
#
# Copyright (C) 2009 Marian Csontos <mcsontos@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from beah.core import event
import simplejson as json

DARGS = list()
DKWARGS = dict()

def def_conf(*args, **kwargs):
    """\
Change default settings. These will be used for all mkev generated functions,
unless overridden."""
    global DARGS, DKWARGS
    DARGS = args
    DKWARGS = kwargs

def send_stdout(evt):
        print json.dumps(evt)

# FIXME:
# * add send_fifo and send_socket functions - open, send, close
# * add SendFifo and SendSocket classes - open on __init__, write on __call__.
#   * usage: beahlib.send = SendFifo()
# * these might need beah.config()! I am not sure it belongs here...

send = send_stdout

def mkev(evtf, *dargs, **dkwargs):
    def evt_wrapper(*args, **kwargs):
        lkwargs = {}
        lkwargs.update(DKWARGS)
        lkwargs.update(dkwargs)
        lkwargs.update(kwargs)
        largs = args or dargs or DARGS
        send(evtf(*largs, **lkwargs))
    evt_wrapper.__doc__ = """\
Method to send an event generated by %s(dargs=%r, dkwargs=%r).

@param args - if defined will replace dargs
@param kwargs - if defined will update dkwargs

@return None

See also def_conf
""" % (evtf, dargs, dkwargs)
    return evt_wrapper

ldebug3 = mkev(event.ldebug3)
ldebug2 = mkev(event.ldebug2)
ldebug1 = mkev(event.ldebug1)
ldebug = ldebug1
linfo = mkev(event.linfo)
lwarning = mkev(event.lwarning)
lerror = mkev(event.lerror)

lose_item = mkev(event.lose_item, timestamp=None)

passed = mkev(event.passed)
warning = mkev(event.warning)
failed = mkev(event.failed)
critical = mkev(event.critical)
fatal = mkev(event.fatal)

