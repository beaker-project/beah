== Beah - Beaker Harness ==

WARNING: This is a (mostly working) prototype. Things may be broken.

To install, simply run:

  python setup.py install

=== Usage ===

bin directory contains few executables:

 * srv - controller server
 * cmd_backend - backend to issue commands to controller. Enter `help' when
   "beacon>" prompt is displayed.
 * out_backend - backend to display messages from controller
 * beah - command line tool. Use `beah help' to display help. This uses the
   same command set as cmd_backend.

 * mtail_srv - run srv and out_backend in single window (using multitail tool.)
 * beat_tap_filter - a filter taking a Perl's Test::Harness::TAP format on
   stdin and producing stream of Events on stdout.

out_backend, cmd_backend and beah will wait for controller.

I recomend to use three terminal windows to run srv, out_backend and
cmd_backend (or beah) them separately.

Some environment settings are required (PATH and PYTHONPATH). Source setup.sh
first before running any of these programs:

        . setup.sh

or simply run

        ./launcher a

which will setup environment and run all three programs in new terminals.

There are few test tasks in examples/tasks directory:

 * a_task - a very simple task in python.
 * a_task.sh - the same, in bash, with some delays introduced.
 * env - a binary displaying environment variables of interest.
 * flood - flooding Controller with messges. This task will not finish and has
   to be killed (in a `pkill flood' manner.)
 * socket - a task using socket to talk to Controller.
 * sock_pipe - a task using socket to talk to Controller and named-pipe
   to collect data from test(s). (WORK IN PROGRESS. NOT WORKING ATM.)

Actually a_task and a_task.sh are a simple demonstration of how the test might
look like, though it is not definite and more comfortable API will be
provided.

In default configuration (not that there is anything else at the moment)
server is listenning on localhost:12432 for backends and localhost:12434 for
tasks.

cmd_backend does not offer history or command line editing features (it is on
TODO list) and it is better to use beah command line tool.

The commands supported are:

ping [MESSAGE]
        ping a controller, response is sent to issuer only.

PING [MESSAGE]
        ping a controller, response is broadcasted to all backends.

run TASK
r TASK  run a task. TASK is an executable.

kill    kill a controller.

dump    instruct controller to print a diagnostics message on stdout.

quit
q       close this backend.

help
h       print this help message.

With default configuration a Controller's log is written to
/tmp/var/log/beacon.log

=== Glossary ===

_Controller_ (aka beacon) is a center piece of harness. It is used to process
Commands from Backends, spawn Tasks and process Events from Tasks, and
eventually forwarding these to Backends.

_Backend_ is a client which connects to Controller and which can issue Commands
(read from console or socket) and is processing Events (writing to console or
to file, to internet socket etc.) Multiple Backends can be connected to a
single Controller.

_Task_ is an executable, which runs a test and is generating Events as a
result, sending these to the Controller server. It can use either stdout or
TCP/IP socket to send events to Controller. stderr is captured as well, but is
considered a raw-data (creating lose_item events.)

_Event_ is a piece of information generated by running Task (e.g. log-event,
result-event) or Controller (e.g. pong-event, bye-event) and sent to Backend.

_Command_ is a piece of information instructing Controller (and eventually
Task) to perform an operation (e.g. run-command to spawn a new Task or
kill-command killing a Controller server)

_Test_ is an executable performing testing producing output in known format.
Task adaptor has to be written to translate this output to Beah's language.

--------------------------------------------------------------------------------
# vim:et:sw=8:ts=8
