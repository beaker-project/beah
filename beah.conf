[DEFAULT]
# Common configuration options. These are inherited by Backends as well.

# LOG: log level. This has to be one of Error, Warning, Info or Debug. The
# option is case insensitive.  True(Info) and False(Error) are also recognized,
# for backward compatibility.
#LOG=Debug
LOG=Warning

# ROOT: root used for all runtime data (e.g. persistent storage and temporary
# files) and logs.
#ROOT=
ROOT=

# VAR_ROOT: path where the runtime files are stored.
#VAR_ROOT=%(ROOT)s/var/beah
VAR_ROOT=%(ROOT)s/var/beah

# LOG_PATH: path where the logs are written.
#LOG_PATH=%(ROOT)s/var/log
LOG_PATH=%(ROOT)s/var/log

# DEVEL: Development build. Enable even more logging.
# Can not be changed during runtime, as this will affect, how some classes are
# constructed.
#DEVEL=True
DEVEL=False

# CONSOLE_LOG: When true, copy all log messages to stderr too.
# console is another permitted value redirecting messages to /dev/console.
#CONSOLE_LOG=True
CONSOLE_LOG=False

[CONTROLLER]
# Beah Controller specific settings.

# NAME: The name of running instance. Used e.g. to name log files and runtime
# files to avoid name clashes.
#NAME=beah
NAME=beah

# LOG_FILE_NAME: Controller's log file name.
#LOG_FILE_NAME=%(LOG_PATH)s/%(NAME)s.log
LOG_FILE_NAME=%(LOG_PATH)s/%(NAME)s.log

# RUNTIME_FILE_NAME: Controller's runtime (persistent storage) file name.
#RUNTIME_FILE_NAME=%(VAR_ROOT)s/%(NAME)s.runtime
RUNTIME_FILE_NAME=%(VAR_ROOT)s/%(NAME)s.runtime

[BACKEND]
# Backend specific settings. These are inherited by Backends as well. Backends
# are reading this config file to provide defaults, and are overriding the
# values specified here, by values defined in their own conf file.

# INTERFACE: Interface the Controller instance's Backend handler is listening
# on. For Backends this may be name of remote host running Controller.
#INTERFACE=
INTERFACE=

# PORT: TPC/IP port the Controller instance is listening on.
#PORT=12432
PORT=12432

# SOCKET: Unix Domain Socket used to communicate between local Controller and
# Backends.
SOCKET=%(VAR_ROOT)s/backend%(PORT)s.socket

[TASK]
# Task specific settings. These are inherited by Tasks as well - by means of
# environment variables.

# INTERFACE: Interface the Controller instance's Task handler is listening
# on. For Tasks this may be name of remote host running Controller.
#INTERFACE=
INTERFACE=127.0.0.1

# PORT: TPC/IP port the Controller instance is listening on.
#PORT=12434
PORT=12434

# SOCKET: Unix Domain Socket used to communicate between local Controller and
# Tasks.
SOCKET=%(VAR_ROOT)s/task%(PORT)s.socket

# This filetype looks the most appropriate :-/
# vim:ft=config
