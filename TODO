== TODO ==

 !! drop fakelc completely, start using the real thing
 !! rhts task runner
    - improve XML-RPC to event conversion
 !! beaker backend
    - improve event to XML-RPC conversion
 !! rhts-test-runner.sh
    - check environment 
    - create /tmp/TESTOUT.log - it is required by rhts-abort
    - run the test and capture outputs
    - check all outputs
 !  command line options:
    - scripts using command line options
 !  test 'python setup.py install'
    - almost works :-)
    - does not install dependencies (it does (only) when using egg's)
      - is it supposed to do so?
      - yum install python python-{simplejson,zope-interface,twisted-{core,web}}
    - there is no Twisted egg when doing "yum install python-twisted"
      - there are Twisted_Web and Twisted_Core egg's :-/
      - setuptools install_requires does not work
    - could not get packages from pypi :-(
      - 1. try building a package on LM and saving somewhere on intranet
      - 2. installing (and running) beah
    - check setup.py in twisted!
 !  fedora packaging
    - check if original Fedora spec's could be used. Download:
        CVSROOT=:pserver:anonymous@cvs.fedora.redhat.com:/cvs/pkgs \
        PKGS={python,python-zope-interface,python-simplejson,python-twisted-{core,web}} \
        cvs co rpms/$PKGS/{F-10,devel}
    - create brew/koji builds
    - installation:
      - download python src, build and install
      - download dependencies and install
      - download beah and install
 !  add a command_id to command and use it to identify echo-events.
    - some events (espacially those expecting results) should have event_id as
      well - e.g. sync-block when done.
 !  communication backend/controller->task
    - stdin/socket?
    - check twisted deferred(?)
 !  clean up backends/server output
    - use logging for all messages
      - configuration option for forwarding to stdout
 !  run pylint and clean up the code!
    - this covers documentation strings too
 !  write examples, HOWTOs
 !  library of common methods for download, install, check and uninstall tasks
 !  go on with refactoring - identify duplicates, useless stuff, patterns.
 9  configuration
    - controller config
      - backends
        - list of backends (name, launcher=(env,executable,args)) which should
          always run
 9  command line options:
    - command + options
      - beah [BEAH-OPTIONS] cmd [CMD-OPTIONS] [CMD-ARGS]
 9  twisted scaffolding for controller, backend and task.
    - I/O - sockets, stdio, named-pipes
    - spawn process
 9  backends should end cleanly when "bye" is received.
 9  check compatibility with older distributions and ms windows
    - one can simply download and build newer python, even on RHEL 3.
    - test AS2.1 and MS W32
      - W32 - see https://winland.englab.brq.redhat.com/shepherd/list.cgi
 9  make it a service (service beacon start...)
 8  beah-tcp-sink
    - reading stdin and forwarding to beah-controller by socket
      - not necessary now
 8  add support for other programming languages - convenience directory.
    - interfaces should be generated from metadata
    - interfaces should use keyword/value (or --option=value) for all obscure
      choices, so it is easy to extend, backward compatible.
      Use positional arguments only for obvious always present arguments.
      Provide wrappers for most common tasks - e.g. simple logging,...
 8  support for reboot - after rebooting:
    - set-up environment, start the controller, initialise backends, and start
      tasks.
 7  identify common formats (e.g. cppunit) and create filters
 4  create filter taking stdin and sending to Controller via socket
    - tee for sockets
 4  output backend w/ colorful output.

=== Testing ===

 9  Test Twisted XML-RPC beaviour, when connection is lost
    - are incoming requests queued?
    - is their order preserved?
    Configure retries

=== Legend ===

Priority classification: (Thanks to Vim)

|| !! || next step ||
|| ! || things to fix immediately ||
|| 9 || next point release ||
|| 8 || next release ||
|| 7 || as soon as possible ||
|| 6 || soon ||
|| 5 || should be included ||
|| 4 || nice to have ||
|| 3 || consider including ||
|| 2 || maybe not ||
|| 1 || probably not ||
|| - || unclassified ||

# vim:et:sw=2

