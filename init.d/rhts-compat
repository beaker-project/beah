#!/bin/sh
# rhts:	Start the RHTS tests
#
# chkconfig: - 99 99
# description:  This service is used in rhts-compat mode.

usage() {
  echo $"Usage: $0 {start|stop|status|restart|condrestart|reload|force-reload|usage|help|real_status|try|wait_try} [OPTIONS]"
}

help() {
  usage
  cat<<END

NOTE: This is not a classical service.
This service should run after all other services are up, as it is running in
foreground to get access to console just like original RHTS system used.

== Commands ==

Starting the service multiple times have no effect and the start command just
returns 0 exit code if the service is already running.

To reuse the service while it is still running and to avoid starting it
anew use try instead of start.

To wait for the service scheduled to start or to reuse while running use
wait_try.

Stopping the service does not kill the service immediately but does create a
kill-file whose presence is taken into account only after all tasks finished
and after grace period to avoid rebooting the machine when service is not
needed for only short periods of time.

To wait for full stop use wait_stop instead of stop.

The status command returns an apparent status, to get real status use
real_status.

== Lockfile ==

As the service uses completely different flow than proper service LOCKFILE is
deemed at least useless.

The lack of LOCKFILE does affect process of changing runlevels which does
call stop only when there is lockfile present. But as stop has no effect
this does not affect the service.

END
}

# Source function library.
. /etc/rc.d/init.d/functions

#Do NOT start rhts if the kernel command line has the following string: norhts
check4norhts() {
  grep -q norhts < /proc/cmdline
  if [ "$?" -eq 0 ] ; then
    echo -n $"The kernel command line contains norhts."
    echo -n $"Use empty 'RHTS_OPTION_COMPATIBLE' parameter or 'RhtsOptions: Compatible' in tasks metadata."
    # TODO: we still need a way how to temporarily disable beah.
    # Use similar principle.
  fi
}

prog=rhts-compat

if [ -f /etc/sysconfig/$prog ]; then
  . /etc/sysconfig/$prog
fi

# DO NOT CHANGE THESE VARIABLES WITHOUT GOOD REASON:

PIDFILE=$BEAH_ROOT/var/run/${prog}.pid
LOCKFILE=$BEAH_ROOT/var/lock/subsys/$prog

LAUNCHERS="$BEAH_ROOT/var/run/beah/rhts-compat/launchers"
KILLER="/mnt/testarea/rhts-compat-end"

function rhts_finish() {
  rhts-test-update $RESULT_SERVER $TESTID finish
  /bin/touch /var/cache/rhts/$TESTID/done
}

function rhts_error() {
  source /usr/bin/rhts_environment.sh
  report_result $TEST/compat Fail $1
  rhts_finish
}

export -f rhts_finish rhts_error

function enter_lock()
{
  # el3,4,5 do not clean subdirectories on boot. el6 and fedora do.
  # anything going to R/W into /var/run/beah should go through this!
  echo $"$prog: Waiting for lock."
  lockfile /var/run/beah.lock || { echo "ERROR: Can not obtain the lock!" >&2; exit 1; }
    # remove files only if beah-rm.lock can be obtained:
    if lockfile -0 -r 0 /var/run/beah/rm.lock; then
      echo $"$prog: Performing /var/run/beah clean-up"
      find /var/run/beah ! -type d -exec rm -f {} \;
    fi
  rm -f /var/run/beah.lock
}

function rhts_compat_main() {
  local file=
  # remove the $KILLER file ASAP:
  if [[ -f $KILLER ]]; then
    echo $"INFO: $prog: Removing existing kill file '$KILLER'."
    rm -f $KILLER
  fi
  enter_lock
  # it was over, but service was started anyway. let's pretend everything is
  # allright:
  rm -f /var/run/beah/rhts-compat.over &> /dev/null
  # service is running already:
  _try && return 0
  echo $"NOTE: This process runs in foreground."
  echo $"Use 'service $prog stop' from another terminal to stop it."
  echo $"It will not stop immediately but only after running tasks are processed."
  echo $$ > $PIDFILE
  #touch $LOCKFILE
  shopt -s nullglob
  while true; do
    if [[ -f $KILLER ]]; then
      echo $"INFO: $prog stopped."
      rm -f $KILLER
      break
    fi
    ls -1 $LAUNCHERS
    for file in $LAUNCHERS/*; do
      if [ -x $file ]; then
        $file
        rm -f $file
      fi
      if [[ -f $KILLER ]]; then
        echo $"INFO: $prog: stop scheduled."
        echo $"INFO: do 'rm -f $KILLER' to continue."
      fi
    done
    sleep 10
  done
  #rm -f $LOCKFILE
  rm -f $PIDFILE
  touch /var/run/beah/rhts-compat.over
}

_try() {
  # If the loop is still active make sure it will stay alive.
  # This does not start new instance.
  if real_status; then
    if [[ -f $KILLER ]]; then
      rm -f $KILLER &> /dev/null
      sleep 5
    fi
    if real_status; then
      echo $"INFO: $prog: service is running already."
      return 0
    fi
  fi
  false
}

try() {
  # no, this does not require the lock.
  if _try; then
    return
  fi
  echo $"INFO: $prog: service is dead. Restart please."
  false
}

_all_is_over() {
  # make sure this is used behind the enter_lock!
  [[ -f /var/run/beah/rhts-compat.over ]]
}

is_help() { [[ $1 == -h || $1 == --help ]]; }

do_help() {
  if is_help $1; then
    cat
    exit 0
  fi
}

wait_try() {
  do_help $1 <<END
Usage: wait_try [-h|--help] [SECONDS]

Wait for service to come up for up to SECONDS seconds. 120 is default.
If the service is not scheduled to run in current runlevel return immediately.

Return Values:
 0 - service is running now
 1 - service is scheduled to run but timeout expired
 2 - service is not scheduled to run or is over alreday

END
  enter_lock
  if [[ $1 == -f || $1 == --force ]]; then
    local force=$1
  fi
  # service has finished:
  _all_is_over && return 2
  # service is running:
  _try && return 0
  # it is not scheduled to run:
  chkconfig $prog || return 2
  # wait!
  local i=0 wait_sec=${1:-120}
  while (( i++ < wait_sec )); do
    # disabled while waiting: reenable when force is used!
    if ! chkconfig $prog; then
      if [[ -n $force ]]; then
        chkconfig --level 345 $prog on # TODO: does it make sense here?
      else
        return 2
      fi
    fi
    # is it running?
    _try && return 0
    sleep 1
  done
  return 1
}

start() {
  echo $"Running RHTS-Compatibility Service..."
  check4norhts
  rhts_compat_main
}

wait_stop() {
  _stop || return 1
  # _stop creates the killer file and when the loop exits or the service is
  # "restarted" the file is removed:
  while [[ -f $KILLER ]]; do
    sleep 5
  done
  sleep 5
  if real_status; then
    echo " [FAIL]"
    echo $"The service was restarted while waiting for tasks to finish."
    false
  else
    echo " [OK]"
    echo $"Stopping $prog: All tasks finished."
  fi
}

stop () {
  _stop && echo " [OK]"
}

_stop() {
  #if [[ -f $LOCKFILE ]]; then
  if real_status; then
    echo $"Stopping $prog: Service waiting for tasks to finish."
    echo -n $"Stopping $prog: "
    mkdir -p $(dirname $KILLER)
    touch $KILLER
  else
    echo -n $"$prog is not running "
  fi
}

restart() {
  wait_stop
  start
}

condrestart(){
  #[ -e $LOCKFILE ] && restart
  apparent_status && restart
  return 0
}

real_status() {
  do_help $1 <<END
real_status - the real status of the "service".

This is different from the status reported to outer world. real_status takes
into account any existing pid- and lock-files and ignores existence of killer
file.

END
  if [ -e $PIDFILE ]; then
    local pid=`cat $PIDFILE`
    if [[ -n $pid ]] && ps -wwo command -p $pid --no-headers | grep 'rhts-compat' >/dev/null; then
      return 0
    fi
    # not running, pidfile exists
    return 1
  #elif [ -e $LOCKFILE ]; then
  #  # not running, lockfile exists
  #  return 2
  else
    # not running
    return 3
  fi
}

apparent_status() {
  do_help $1 <<END
apparent_status - the apparent status of the "service".

This is same sa real_status but reflects presence of killer file.

END
  real_status
  local stat=$?
  if [[ $stat == 0 ]]; then
    if [ -e $KILLER ]; then
      echo $"NOTE: The $prog has been stopped but is still waiting for tasks to finish."
      return 3
    else
      # running
      return 0
    fi
  fi
}

status() {
  do_help $1 <<END
status - status the service reports to outer world.

Discard any existing lockfile and pidfile info: newer init is checking for
pending LOCK files and may refuse to start the service. The service MUST
start!

END
  if apparent_status; then
    return 0
  else
    # pretend it's not running.
    return 3
  fi
}

[[ -n $BEAH_DEBUG ]] && set -x
# See how we were called.
command=$1
shift
case "$command" in
  start)
    start "$@"
    RETVAL=$?
    ;;
  stop)
    stop "$@"
    RETVAL=$?
    ;;
  status)
    #status $prog
    status "$@"
    RETVAL=$?
    ;;
  restart|force-reload)
    restart "$@"
    RETVAL=$?
    ;;
  condrestart|try-restart)
    condrestart "$@"
    RETVAL=$?
    ;;
  reload)
    ;;
  # Non-standard extensions:
  wait_stop)
    wait_stop "$@"
    RETVAL=$?
    ;;
  real_status)
    real_status "$@"
    RETVAL=$?
    ;;
  try)
    try "$@"
    RETVAL=$?
    ;;
  wait_try)
    wait_try "$@"
    RETVAL=$?
    ;;
  # And finally some help:
  usage)
    usage
    exit 0
    ;;
  help)
    help
    exit 0
    ;;
  *)
    echo "Command '$command' not recognized." >&2
    usage >&2
    exit 1
    ;;
esac
exit $RETVAL

