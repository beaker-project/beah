#!/bin/sh
# rhts:	Start the RHTS tests
#
# chkconfig: - 99 99
# description:  This service is used in rhts-compat mode.
#
# Tihs service should run after all other services are up, as it is running in
# foreground to get access to console just like original RHTS system used.

# Source function library.
. /etc/rc.d/init.d/functions

#Do NOT start rhts if the kernel command line has the following string: norhts
check4norhts() {
  grep -q norhts < /proc/cmdline
  if [ "$?" -eq 0 ] ; then
    echo -n $"The kernel command line contains norhts. Therefore, RHTS will not be started."
    exit 1
  fi
}

prog=rhts-compat

if [ -f /etc/sysconfig/$prog ]; then
  . /etc/sysconfig/$prog
fi

# DO NOT CHANGE THESE VARIABLES WITHOUT GOOD REASON:

PIDFILE=$BEAH_ROOT/var/run/${prog}.pid
LOCKFILE=$BEAH_ROOT/var/lock/subsys/$prog

LAUNCHERS="$BEAH_ROOT/var/run/beah/rhts-compat/launchers"
KILLER="/mnt/testarea/rhts-compat-end"

function rhts_finish() {
  rhts-test-update $RESULT_SERVER $TESTID finish
  /bin/touch /var/cache/rhts/$TESTID/done
}

function rhts_error() {
  source /usr/bin/rhts_environment.sh
  report_result $TEST/compat Fail $1
  rhts_finish
}

export -f rhts_finish rhts_error

function rhts_compat_main() {
  local file=
  # el3,4,5 do not clean subdirectories on boot. el6 and fedora do.
  echo -n $"Performing /var/run/beah clean-up"
  # anything going to R/W into /var/run/beah should go through this!
  lockfile /var/run/beah.lock
    # remove files only if beah-rm.lock can be obtained:
    if lockfile -0 -r 0 /var/run/beah/rm.lock; then
      find /var/run/beah ! -type d -exec rm -f {} \;
    fi
  rm -f /var/run/beah.lock
  echo $"NOTE: This process runs in foreground."
  echo $"Use 'service $prog stop' from another terminal to stop it."
  echo $"It will not stop immediately but only after running tasks are processed."
  if [[ -f $KILLER ]]; then
    rm -f $KILLER
  fi
  if status; then
    wait `cat $PIDFILE`
    return $?
  fi
  echo $$ > $PIDFILE
  touch $LOCKFILE
  shopt -s nullglob
  while true; do
    if [[ -f $KILLER ]]; then
      rm -f $KILLER
      break
    fi
    for file in $LAUNCHERS/*; do
      if [ -x $file ]; then
        $file
        rm -f $file
      fi
    done
    sleep 10
  done
  rm -f $LOCKFILE
  rm -f $PIDFILE
}

start() {
  echo $"Running RHTS-Compatibility Service..."
  check4norhts
  rhts_compat_main
}

wait_stop() {
  _stop || return 1
  while [[ -f $KILLER ]]; do
    sleep 60
  done
  echo " [OK]"
  echo $"Stopping $prog: All tasks finished."
}

stop () {
  _stop && echo " [OK]"
}

_stop() {
  if [[ -f $LOCKFILE ]]; then
    echo $"Stopping $prog: Service waiting for tasks to finish."
    echo -n $"Stopping $prog: "
    mkdir -p $(dirname $KILLER)
    touch $KILLER
    true
  else
    echo "$prog is not not running. [FAIL]"
    false
  fi
}

restart() {
  wait_stop
  start
}

condrestart(){
  [ -e $LOCKFILE ] && restart
  return 0
}

status() {
  if [ -e $PIDFILE ]; then
    if ps -p `cat $PIDFILE` &> /dev/null; then
      if [ ! -e $KILLER ]; then
        return 0
      else
        return 3
      fi
    else
      return 1
    fi
  elif [ -e $LOCKFILE ]; then
    return 2
  else
    return 3
  fi
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    #status $prog
    status
    RETVAL=$?
    ;;
  restart|force-reload)
    restart
    ;;
  condrestart|try-restart)
    condrestart
    ;;
  reload)
    ;;
  usage|*)
    echo $"Usage: $0 {start|stop|status|restart|condrestart|reload|force-reload|usage}"
    ;;
esac
exit $RETVAL

