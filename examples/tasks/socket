#!/usr/bin/env python

# Beah - Test harness. Part of Beaker project.
#
# Copyright (C) 2009 Marian Csontos <mcsontos@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
print os.environ

################################################################################
# FACTORY:
################################################################################
from twisted.internet import reactor
from beah.wires.internals.twadaptors import ControllerAdaptor_Task_JSON
from beah.wires.internals.twtask import TaskFactory, start_task
from beah import config
config.config()
################################################################################
# TEST:
################################################################################
if __name__=='__main__':
    from beah.core import event

    class LoggingAdaptor(ControllerAdaptor_Task_JSON):
        def connectionMade(self):
            print "%s: I am connected!" % self.__class__.__name__
            ControllerAdaptor_Task_JSON.connectionMade(self)

        def connectionLost(self, reason):
            print "%s: I was lost!" % self.__class__.__name__

        def lineReceived(self, data):
            print self.__class__.__name__, ": Data received.  Data: %r" % data
            ControllerAdaptor_Task_JSON.lineReceived(self, data)

    class DemoTask(object):
        """Class used as a Task should implement this interface. This includes
        Controller side Task-Adaptor"""

        def __init__(self, id):
            self.id = id
            self.controller = None

        def proc_cmd(self, cmd):
            """Process command received from Controller"""
            pass

        def set_controller(self, controller=None):
            self.controller = controller
            if controller:
                self.controller.proc_evt(self, event.event('introduce', id=self.id))
                self.controller.proc_evt(self, event.pong(message="Are you there?"))
                self.controller.proc_evt(self, event.passed())
                self.controller.proc_evt(self, event.failed())
                self.controller.proc_evt(self, event.linfo("Info message"))
                self.controller.proc_evt(self, event.lerror("Error message"))
                self.controller.proc_evt(self, ['Object',{'what':'something else', 'where':'nowhere'}])
                reactor.callLater(2, reactor.stop)

    start_task(config, DemoTask(os.getenv('BEACON_TID')),
            host=os.getenv('BEACON_THOST'), port=os.getenv('BEACON_TPORT'),
            adaptor=LoggingAdaptor)
    reactor.run()

