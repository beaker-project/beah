#!/usr/bin/env python

# Beah - Test harness. Part of Beaker project.
#
# Copyright (C) 2009 Marian Csontos <mcsontos@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.internet import reactor
from beah.wires.internals.twadaptors import ControllerAdaptor_Task_JSON
from beah.wires.internals.twtask import start_task
from beah.wires.internals.twmisc import OsFifo
from beah.misc import mktemppipe

class DummyTestProtocol(protocol.ProcessProtocol):

    def connectionMade(self):
        pass

    def outReceived(self, data):
        print data

    def errReceived(self, data):
        print >> 2, data

    def processExited(self, reason):
        pass

    def processEnded(self, reason):
        pass

DefaultTestProtocol = DummyTestProtocol

class PipeTask(object):
    """Class used as a Task should implement this interface. This includes
    Controller side Task-Adaptor"""

    def __init__(self, id, test_file, test_args=[], proto=None):
        """
        Spawn a test, capture output (of named pipe) and forward to
        controller.

        @param id        task id
        @param test_file test executable
        @param test_args arguments to pass to test_file
        """
        self.id         = id
        self.controller = None
        self.test_file  = test_file
        self.test_args  = test_args
        # CREATE A PIPE
        self.pname      = mktemppipe()
        # CREATE A PIPE LISTENER
        fifo = OsFifo(reactor, self.pname, PROTOCOL, True)
        reactor.addReader(fifo)
        # SET ENVIRONMENT
        task_env = dict(os.getenv())
        task_env['BEACON_PNAME'] = self.pname
        # SPAWN A TEST
        self.protocol = (proto or DefaultTestProtocol)()
        self.protocol.controller = self.controller
        reactor.spawnProcess(self.protocol, self.test_file,
                args=[self.test_file]+self.test_args,
                env=task_env)

    def proc_cmd(self, cmd):
        """Process command received from Controller"""
        pass

    def set_controller(self, controller=None):
        self.controller = controller
        if controller:
            pass
        else:
            pass

################################################################################
# TEST:
################################################################################
if __name__=='__main__':
    class LoggingAdaptor(ControllerAdaptor_Task_JSON):
        def connectionMade(self):
            print "%s: I am connected!" % self.__class__.__name__
            ControllerAdaptor_Task_JSON.connectionMade(self)

        def connectionLost(self, reason):
            print "%s: I was lost!" % self.__class__.__name__
            ControllerAdaptor_Task_JSON.connectionLost(self, reason)

        def lineReceived(self, data):
            print self.__class__.__name__, ": Data received.  Data: %r" % data
            ControllerAdaptor_Task_JSON.lineReceived(self, data)

    start_task(PipeTask(os.getenv('BEACON_TID'), 'test'),
            host=os.getenv('BEACON_THOST'), port=os.getenv('BEACON_TPORT'),
            adaptor=LoggingAdaptor)
    reactor.run()

